const {planets} = require ('./data');
const {heroes} = require ('./data');
const express = require('express');
const cors = require('cors');
const app = express();
const PORT = 3000;

// To convert every incomming request data as JSON
// This is necessary in order to get the data for POST and PUT request.
app.use(express.json());

// (GET, localhost:3000), return a welcome text.
app.get('/', (req, res) => {
    res.send('Welcome to my web server');
});

// (GET, localhost:3000/messages), return html messages.
app.get('/messages', (req, res) => {
    res.send('<h1>Messages</h1><ul><li>Hello 1</li><li>Hello 2</li></ul>');
});

// (GET, localhost:3000/planets), return list of planets in JSON format
app.get('/planets', (req, res) => {
    res.send(planets);
    
    // !!! Notes:
    // 1. There are several ways to send a response
    // - res.send() and res.json() are similar. The main difference is with
    // res.json(), the "Content-Type" will be always set as "application/json".
    // res.send() will behave exactly like res.json() only when the data is
    // array of objects (e.g., planets), otherwise its going to assume that
    // the data is in HTML format (e.g., /messages).
    // - res.end() can be used when we do not want to send any data.
    // (e.g., if we want to just send a status code: res.status(404).end()).
    // 2. We have to allow the execution of sending a response ONE TIME only in 
    // every request handler. (i.e., can not send more than 1 or less than 1).
});

// (GET, localhost:3000/planets/{id}), return a planet based on its id.
app.get('/planets/:id', (req, res) => {
    // Obtain a paramater from url
    const tmpid = req.params.id;
    // Javascript function to filter an array of object
    // based on specific field. in this case, we filter a planet based on its id.
    // We assume that "id" is unique.
    const planet = planets.filter(({id}) => id === +tmpid);
    // Check if the requested planet exists, if not then send 404 (not found).
    if (planet) {
        // [0] is used to send the send an object (first index) instead of an array.
        res.send(planet[0]);
    } else {
        res.status(400).send(`No planet with id ${id}`);
    }
});

// (GET, localhost:3000/planets/color/{color}), return a planet based on its color.
app.get('/planets/color/:color', (req, res) => {
    const tmpcolor = req.params.color;
    const planet = planets.filter(({color}) => color === tmpcolor);
    if (planet) {
        res.send(planet);
    } else {
        res.status(400).send(`No planet with color ${tmpcolor}`);
    }
});

// (POST, localhost:3000/planets), insert a new planet
app.post('/planets', (req, res) => {
    // Check if the field "name" is not empty
    if (!req.body.name) {
        // "return" is used in order to escape the function once the response is sent.
        return res.status(400).send('Missing planet\'s name');
    }
    // Create a new object to be inserted
    const newPlanet = {
        // New id is generated by incrementing the id of the last planet in the array.
        id: planets[planets.length - 1].id + 1,
        // The object "body" is an object of the received data (in JSON).
        name: req.body.name,
        color: req.body.color
    }
    // Push the new planet into the array, then send as a response.
    planets.push(newPlanet);
    res.send(newPlanet);
});

// (PUT, localhost:3000/planets/{id}), update a planet
app.put('/planets/:id', (req, res) => {
    if (!req.body.name) {
        return res.status(400).send('Missing planet\'s name');
    }
    const tmpid = req.params.id;
    const planet = planets.filter(({id}) => id === tmpcolor);
    if (planet) {
        // Get an index of the planet we want to update
        const idx = planets.findIndex((obj => obj.id == tmpid));
        const newPlanet = {
            id: tmpid,
            name: req.body.name,
            color: req.body.color
        }
        // Replace a planet in the array with a new planet
        planets[idx] = newPlanet;
        res.send(newPlanet);
    } else {
        res.status(400).send(`No planet with id ${id}`);
    }
});

// (DELETE, localhost:3000/planets/{id}), delete a planet
app.delete('/planets/:id', (req, res) => {
    const tmpid = req.params.id;
    const planet = planets.filter(({id}) => id === +tmpid);
    if (planet) {
        const idx = planets.findIndex((obj => obj.id == tmpid));
        // Remove an element in the array, idx is the index in the array
        // and 1 the number of element we want to remove.
        planets.splice(idx, 1);
        res.send(`Planet with id ${tmpid} is deleted`);
    } else {
        res.status(400).send(`Planet with id ${tmpid} doesn't exist`);
    }
});
app.get('/heroes', (req, res) => {
    res.send(heroes);
});
app.get('/heroes/:id', (req, res) => {
    const tmpid = req.params.id;
    const hero = heroes.filter(({id}) => id === +tmpid);
    if (hero) {
        res.send(hero[0]);
    } else {
        res.status(400).send(`No hero with id ${tmpid}`);
    }
});
app.get('/heroes/origin/:origin', (req, res) => {
    const ori = req.params.origin;
    const hero = heroes.filter(({origin}) => origin === ori);
    if (hero) {
        res.send(hero);
    } else {
        res.status(400).send(`No hero from ${ori}`);
    }
});
app.get('/heroes/power/:power', (req, res) => {
    const pow = req.params.power;
    const hero = heroes.filter(({power}) => power < +pow);
    if (hero) {
        res.send(hero);
    } else {
        res.status(400).send(`No hero from ${ori}`);
    }
});
app.post('/heroes', (req, res) => {
    if (!req.body.name && !req.body.origin) {
        return res.status(400).send('Hero\'s name and origin are mandatory');
    }
    const newHero = {
        id: heroes[heroes.length - 1].id + 1,
        name: req.body.name,
        origin: req.body.origin,
        power: req.body.power
    }
    heroes.push(newHero);
    res.send(newHero);
});
app.put('/heroes/:id', (req, res) => {
    if (!req.body.name && !req.body.origin) {
        return res.status(400).send('Missing hero\'s name and origin');
    }
    const tmpid = req.params.id;
    const hero = heroes.filter(({id}) => id === +tmpid);
    if (hero) {
        const idx = heroes.findIndex((obj => obj.id == tmpid));
        const newHero = {
            id: tmpid,
            name: req.body.name,
            origin: req.body.origin,
            power: req.body.power
        }
        heroes[idx] = newHero;
        res.send(newHero);
    } else {
        res.status(400).send(`No hero with id ${tmpid}`);
    }
});
app.delete('/heroes/:id', (req, res) => {
    const tmpid = req.params.id;
    const hero = heroes.filter(({id}) => id === +tmpid);
    if (hero) {
        const idx = heroes.findIndex((obj => obj.id == tmpid));
        heroes.splice(idx, 1);
        res.send(`Hero with id ${tmpid} is deleted`);
    } else {
        res.status(400).send(`Hero with id ${tmpid} doesn't exist`);
    }
});
app.listen(PORT, () => {
    console.log(`Listening on port ${PORT}`);
})